import cv2
import os


video_path = "cars1.mp4"
cap = cv2.VideoCapture(video_path)
tracker = cv2.TrackerKCF_create()

# Variáveis para armazenar a ROI inicial
roi_selected = False
roi = None
avg_position = None
avg_factor = 0.8 

cascade_path = 'haarcascades/car.xml'

car_cascade = cv2.CascadeClassifier(cascade_path)

# Loop principal para rastrear o objeto no vídeo
while True:
    ret, frame = cap.read()

    if frame is None:
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    cars = car_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(50, 50))

    if len(cars) > 0:
        avg_position = (
            int(avg_factor * avg_position[0] + (1 - avg_factor) * (cars[0][0] + cars[0][2] / 2)),
            int(avg_factor * avg_position[1] + (1 - avg_factor) * (cars[0][1] + cars[0][3] / 2))
        ) if avg_position else (cars[0][0] + cars[0][2] / 2, cars[0][1] + cars[0][3] / 2)

    # Calcular a ROI com base na média das posições dos carros
    roi_width, roi_height = 400, 300
    roi = (
        int(avg_position[0] - roi_width / 2),
        int(avg_position[1] - roi_height / 2),
        roi_width,
        roi_height
    ) if avg_position else None

    # Inicializar o rastreamento com a ROI
    if roi and not roi_selected:
        tracker.init(frame, roi)
        roi_selected = True

    success, roi = tracker.update(frame)

    if success:
        (x, y, w, h) = tuple(map(int, roi))
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    cv2.imshow("Frame", frame)

    if cv2.waitKey(1) & 0xFF == 27:
        break

cap.release()
cv2.destroyAllWindows()
